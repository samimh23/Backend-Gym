// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String
  firstName         String
  lastName          String
  phone             String?
  avatar            String?
  role              UserRole
  isEmailVerified   Boolean   @default(false)
  emailVerifyToken  String?
  resetPasswordToken String?
  refreshToken      String?
  isActive          Boolean   @default(true)
  lastLoginAt       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relationships
  coachProfile      CoachProfile?
  clientProfile     ClientProfile?
  storeOwnerProfile StoreOwnerProfile?
  
  @@map("users")
}

model CoachProfile {
  id              String   @id @default(uuid())
  userId          String   @unique
  specialization  String
  bio             String?
  experience      Int      // years of experience
  certifications  String[] // array of certifications
  monthlyRate     Decimal
  yearlyRate      Decimal?
  isVerified      Boolean  @default(false)
  rating          Decimal? @default(0)
  totalReviews    Int      @default(0)
  totalClients    Int      @default(0)
  availableSlots  Int      @default(50) // max clients
  socialLinks     Json?    // Instagram, YouTube, etc.
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  clients         Subscription[]
  workoutPlans    WorkoutPlan[]
  nutritionPlans  NutritionPlan[]
  reviews         Review[]
  
  @@map("coach_profiles")
}

model ClientProfile {
  id              String        @id @default(uuid())
  userId          String        @unique
  dateOfBirth     DateTime?
  gender          Gender?
  weight          Decimal?      // in kg
  height          Decimal?      // in cm
  fitnessGoal     String?
  activityLevel   ActivityLevel?
  medicalConditions String[]    // array of conditions
  preferences     Json?         // diet preferences, workout preferences
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relationships
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptions   Subscription[]
  reviews         Review[]
  
  @@map("client_profiles")
}

model StoreOwnerProfile {
  id          String   @id @default(uuid())
  userId      String   @unique
  storeName   String
  storeAddress String?
  businessLicense String?
  taxId       String?
  commission  Decimal  @default(10.0) // percentage
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("store_owner_profiles")
}

model Subscription {
  id            String             @id @default(uuid())
  clientId      String
  coachId       String
  plan          SubscriptionPlan
  amount        Decimal
  currency      String             @default("USD")
  status        SubscriptionStatus @default(PENDING)
  startDate     DateTime?
  endDate       DateTime?
  paymentMethod PaymentMethod
  paymentReference String?         // Stripe, PayPal reference
  autoRenew     Boolean            @default(true)
  cancelReason  String?
  canceledAt    DateTime?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  // Relationships
  client        ClientProfile      @relation(fields: [clientId], references: [id])
  coach         CoachProfile       @relation(fields: [coachId], references: [id])
  payments      Payment[]
  
  @@map("subscriptions")
}

model Payment {
  id              String        @id @default(uuid())
  subscriptionId  String
  amount          Decimal
  currency        String        @default("USD")
  status          PaymentStatus
  paymentMethod   PaymentMethod
  paymentReference String?      // External payment gateway reference
  failureReason   String?
  processedAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relationships
  subscription    Subscription  @relation(fields: [subscriptionId], references: [id])
  
  @@map("payments")
}

model WorkoutPlan {
  id          String     @id @default(uuid())
  coachId     String
  title       String
  description String?
  difficulty  Difficulty
  duration    Int        // total minutes
  category    String     // Strength, Cardio, Flexibility, etc.
  equipment   String[]   // required equipment
  exercises   Json       // detailed exercise data
  isPublic    Boolean    @default(false)
  isTemplate  Boolean    @default(false)
  tags        String[]   // searchable tags
  imageUrl    String?
  videoUrl    String?
  usageCount  Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relationships
  coach       CoachProfile @relation(fields: [coachId], references: [id])
  assignments WorkoutAssignment[]
  
  @@map("workout_plans")
}

model NutritionPlan {
  id          String   @id @default(uuid())
  coachId     String
  title       String
  description String?
  totalCalories Int
  macros      Json     // protein, carbs, fats breakdown
  meals       Json     // detailed meal plans
  dietType    String?  // Keto, Vegan, Mediterranean, etc.
  allergies   String[] // allergen information
  isPublic    Boolean  @default(false)
  isTemplate  Boolean  @default(false)
  tags        String[] // searchable tags
  imageUrl    String?
  usageCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  coach       CoachProfile @relation(fields: [coachId], references: [id])
  assignments NutritionAssignment[]
  
  @@map("nutrition_plans")
}

model WorkoutAssignment {
  id            String      @id @default(uuid())
  workoutPlanId String
  clientId      String
  coachId       String
  assignedDate  DateTime    @default(now())
  dueDate       DateTime?
  status        AssignmentStatus @default(ASSIGNED)
  notes         String?
  clientFeedback String?
  completed     Boolean     @default(false)
  completedAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relationships
  workoutPlan   WorkoutPlan @relation(fields: [workoutPlanId], references: [id])
  
  @@map("workout_assignments")
}

model NutritionAssignment {
  id              String        @id @default(uuid())
  nutritionPlanId String
  clientId        String
  coachId         String
  assignedDate    DateTime      @default(now())
  dueDate         DateTime?
  status          AssignmentStatus @default(ASSIGNED)
  notes           String?
  clientFeedback  String?
  adherence       Int?          // percentage 0-100
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relationships
  nutritionPlan   NutritionPlan @relation(fields: [nutritionPlanId], references: [id])
  
  @@map("nutrition_assignments")
}

model Review {
  id        String   @id @default(uuid())
  clientId  String
  coachId   String
  rating    Int      // 1-5 stars
  comment   String?
  isVisible Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  client    ClientProfile @relation(fields: [clientId], references: [id])
  coach     CoachProfile  @relation(fields: [coachId], references: [id])
  
  @@unique([clientId, coachId]) // One review per client-coach pair
  @@map("reviews")
}

// Enums
enum UserRole {
  CLIENT
  COACH
  STORE_OWNER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum SubscriptionPlan {
  MONTHLY
  QUARTERLY
  YEARLY
  LIFETIME
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  CANCELLED
  EXPIRED
  PAUSED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  STRIPE
  BANK_TRANSFER
  CASH
  IN_PERSON
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum ActivityLevel {
  SEDENTARY
  LIGHTLY_ACTIVE
  MODERATELY_ACTIVE
  VERY_ACTIVE
  EXTREMELY_ACTIVE
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum AssignmentStatus {
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  OVERDUE
  CANCELLED
}